<?php
/**
 * @file
 * Code for the HWC Practical tool feature.
 */

include_once 'hwc_practical_tool.features.inc';

function hwc_practical_tool_sort_form($form, $form_state) {
  $form = array(
  );
  $form['sort_by'] = [
    '#type' => 'select',
    '#title' => t('Order'),
    '#default_value'=>'field_publication_date',
    '#options'=>[
      'search_api_relevance' => t('Relevance'),
      'field_publication_year' => t('Year of publication'),
    ]
  ];
  $form['sort_by']['#value'] = $_REQUEST['sort_by'];
  return $form;
}

/**
 * Implements hook_views_post_render().
 */
function hwc_practical_tool_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == 'practical_tools') {
    drupal_add_js(drupal_get_path('module', 'hwc_practical_tool') . '/sort.js', array('weight' => 20));
    $order_html = '<div class="sort-container col-xs-3">' . drupal_render(drupal_get_form('hwc_practical_tool_sort_form')) . '</div><span class="count-container pull-right">';
    $output = trim(str_replace('@order', $order_html, $output)). '</span>';
  }
}

/**
 * Implements hook_block_info().
 */
function hwc_practical_tool_block_info() {
  $blocks = array();
  $blocks['hwc_practical_tool_listing'] = array(
    'info' => t('Practical tools listing'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['hwc_practical_tool_language_list'] = array(
    'info' => t('Practical tool language list'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function hwc_practical_tool_block_view($delta = '') {
  $block = array();
  if ($delta == 'hwc_practical_tool_language_list') {
    if ($node = menu_get_object()) {
      $q = db_select('languages', 'l');
      $q->fields('l', array('language', 'name', 'native'));
      $q->innerJoin('entity_translation', 'a', 'l.language = a.language');
      $q->condition('a.entity_id', $node->nid);
      $q->condition('a.entity_type', 'node');
      $languages = $q->execute()->fetchAll();

      $block['content'] = theme('hwc_practical_tool_language_list', array(
          'languages' => $languages,
        )
      );
    }
  }
  if ($delta == 'hwc_practical_tool_listing') {
    module_load_include('inc', 'hwc_practical_tool', 'hwc_practical_tool.pages');
    $block['content'] = drupal_get_form('hwc_practical_tool_menu_tools_form');
  }
  return $block;
}

/**
 * Implements hook_field_formatter_info().
 */
function hwc_practical_tool_field_formatter_info() {
  $info = array(
    'access_tool_link_and_language' => array(
      'label' => t('Access tool link and language'),
      'field types' => array('field_collection'),
      'settings' => array(
        'label' => t('Visit tool in:'),
      ),
    ),
    'access_tool_link_details' => array(
      'label' => t('Access tool link for practical tool details'),
      'field types' => array('field_collection'),
      'settings' => array(
        'label_1' => t('Access tool:'),
        'label_2' => t('Available in:'),
      ),
    ),
    'field_collection_title' => array(
      'label' => t('Fields collection title'),
      'field types' => array('field_collection'),
      'settings' =>  array(
        'edit' => t('Edit'),
        'delete' => t('Delete'),
        'add' => t('Add'),
        'description' => TRUE,
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_theme().
 */
function hwc_practical_tool_theme() {
  $theme = array();
  $path = drupal_get_path('module', 'hwc_practical_tool');
  $theme['hwc_practical_tool_language_list'] = array(
    'template' => 'hwc_practical_tool_language_list',
    'variables' => array(
      'languages' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['access_tool_link_and_language'] = array(
    'template' => 'hwc_practical_tool_access_tool_link_and_language',
    'variables' => array(
      'items' => NULL,
      'label' => NULL,
    ),
    'path' => $path . '/templates',
  );
  $theme['access_tool_link_details'] = array(
    'template' => 'hwc_practical_tool_access_tool_link_details',
    'variables' => array(
      'items' => NULL,
      'label_1' => NULL,
      'label_2' => NULL,
      'node' => NULL,
    ),
    'path' => $path . '/templates',
  );
  return $theme;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function hwc_practical_tool_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $elements = array();
  if ($display['type'] == 'field_collection_title') {
      $elements['edit'] = array(
        '#type' => 'textfield',
        '#title' => t('Edit link title'),
        '#default_value' => $settings['edit'],
        '#description' => t('Leave the title empty, to hide the link.'),
      );
      $elements['delete'] = array(
        '#type' => 'textfield',
        '#title' => t('Delete link title'),
        '#default_value' => $settings['delete'],
        '#description' => t('Leave the title empty, to hide the link.'),
      );
      $elements['add'] = array(
        '#type' => 'textfield',
        '#title' => t('Add link title'),
        '#default_value' => $settings['add'],
        '#description' => t('Leave the title empty, to hide the link.'),
      );
      $elements['description'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show the field description beside the add link.'),
        '#default_value' => $settings['description'],
        '#description' => t('If enabled and the add link is shown, the field description is shown in front of the add link.'),
      );
    }

  // Add a select form element for view_mode if viewing the rendered field_collection.
  /*  if ($display['type'] !== 'field_collection_title') {

    $entity_type = entity_get_info('field_collection_item');
    $options = array();
    foreach ($entity_type['view modes'] as $mode => $info) {
      $options[$mode] = $info['label'];
    }

    $elements['view_mode'] = array(
      '#type' => 'select',
      '#title' => t('View mode'),
      '#options' => $options,
      '#default_value' => $settings['view_mode'],
      '#description' => t('Select the view mode'),
    );
  }*/

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function hwc_practical_tool_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $output = array();
  if ($display['type'] == 'field_collection_title') {
      $links = array_filter(array_intersect_key($settings, array_flip(array('add', 'edit', 'delete'))));
      if ($links) {
        $output[] = t('Links: @links', array('@links' => check_plain(implode(', ', $links))));
      }
      else {
        $output[] = t('Links: none');
      }
  }
/*  if ($display['type'] !== 'field_collection_title') {
    $entity_type = entity_get_info('field_collection_item');
    if (!empty($entity_type['view modes'][$settings['view_mode']]['label'])) {
      $output[] =  t('View mode: @mode', array('@mode' => $entity_type['view modes'][$settings['view_mode']]['label']));
    }
  }*/

  return implode('<br>', $output);
}

/**
 * Implements hook_field_formatter_view().
 */
function hwc_practical_tool_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'access_tool_link_and_language':
      $settings = $display['settings'];
      $label = trim($settings['label']);
      $element = array(
        '#theme' => 'access_tool_link_and_language',
        '#items' => $items,
        '#label' => $label,
      );
      break;

    case 'access_tool_link_details':
      $settings = $display['settings'];
      $label_1 = trim($settings['label_1']);
      $label_2 = trim($settings['label_2']);
      $element = array(
        '#theme' => 'access_tool_link_details',
        '#items' => $items,
        '#label_1' => $label_1,
        '#label_2' => $label_2,
        '#node' => entity_metadata_wrapper('node', $entity),
      );
      break;

    case 'field_collection_title':

      foreach ($items as $delta => $item) {
        if ($field_collection = field_collection_field_get_entity($item)) {
          $name = $field_collection->field_fc_provider_name['und'][0]['value'];
          $output = $name;//l($field_collection->label(), $field_collection->path());
//          $links = array();
//          foreach (array('edit', 'delete') as $op) {
//            if ($settings[$op] && field_collection_item_access($op == 'edit' ? 'update' : $op, $field_collection)) {
//              $title = entity_i18n_string("field:{$field['field_name']}:{$instance['bundle']}:setting_$op", $settings[$op]);
//              $links[] = l($title, $field_collection->path() . '/' . $op, array('query' => drupal_get_destination()));
//            }
//          }
//          if ($links) {
//            $output .= ' (' . implode('|', $links) . ')';
//          }
          $element[$delta] = array('#markup' => $output);
        }
      }
      field_collection_field_formatter_links($element, $entity_type, $entity, $field, $instance, $langcode, $items, $display);
      break;
  }
  return $element;
}

/**
 * Implements hook_node_view().
 */
function hwc_practical_tool_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'practical_tool' && $view_mode == 'teaser') {
    if (isset($node->content['field_country']) && empty($node->content['field_country']['#items'])) {
      hide($node->content['field_country']);
    }
    if (isset($node->content['field_provider']) && empty($node->content['field_provider']['#items'])) {
      hide($node->content['field_provider']);
    }
    if (isset($node->content['field_tool_type']) && empty($node->content['field_tool_type']['#items'])) {
      hide($node->content['field_tool_type']);
    }
  }
}
