<?php
/**
 * @file
 * Code for the HWC Good Practice Exchange feature.
 */

include_once 'hwc_good_practice_exchange.features.inc';

/**
 * Implements hook_search_api_solr_query_alter().
 */
function hwc_good_practice_exchange_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  global $language;

  if (arg(0) == 'communications') {
    $call_args['params']['fq'][] = 'is_partner_section:"1"';
    $call_args['params']['fq'][] = 'ss_language:"' . $language->language . '"';

  }

  if (arg(0) == 'partners-documents') {
//    $call_args['params']['fq'][] = '{!tag=tm_partner_tid}*:* AND -(tm_partner_tid:"section")';
//    $call_args['params']['fq'][] = '{!tag=tm_partner_tid}tm_partner_tid:"section"';
    $call_args['params']['fq'][] = 'is_partner_section:"0"';
    $call_args['params']['fq'][] = 'ss_language:"' . $language->language . '"';

//    tm_partner_tid
/*    $call_args['params']['sort'] = 'score desc';
    $call_args['params']['fq'][] = 'sm_field_available_in_languages\:value:"' . $language->language . '"';
    $sort_order = strtolower(@$_REQUEST['sort_order']);
    $sort_by = strtolower(@$_REQUEST['sort_by']);
    if ($sort_by) {
      $call_args['params']['sort'] = 'ds_field_publication_year ';
      if ($sort_by == 'search_api_relevance') {
        $call_args['params']['sort'] = 'score  ';
      }
      if (!in_array($sort_order, ['asc', 'desc'])) {
        $sort_order = 'desc';
      }
      $call_args['params']['sort'] .= $sort_order;
    }
*/
  }

}
/**
 * Implements hook_facet_items_alter().
 */
function hwc_good_practice_exchange_facet_items_alter(&$build, $settings) {
  if ($settings->facet == "partner_tid") {
    foreach ($build as $tid => $item) {
      if (intval($tid)) {
        $term = taxonomy_term_load($tid);
        $build[$tid]['#markup'] = $term->name;
      }
    }
  }

}

function hwc_good_practice_exchange_node_get_workbench_section($item) {
  return (hwc_good_practice_exchange_node_get_workbench_access_tid($item) == 'section') ? 1 : 0;
}

function hwc_good_practice_exchange_node_get_workbench_access_tid($item) {
  if ($item->type != 'document') {
    return '';
  }
  $q = db_select('workbench_access_node', 'w');
  $q->fields('w', ['access_id'])
    ->condition('w.nid', $item->nid);
//    ->condition('w.access_id', 'section','!=');
  return $q->execute()->fetchField();
}

function hwc_good_practice_exchange_node_get_workbench_partner_nid($nid) {
  $tid = hwc_good_practice_exchange_node_get_workbench_access_tid($nid);
  $q = db_select('workbench_access_node', 'w');
  $q->innerJoin('node', 'n', 'w.nid = n.nid');
  $q->fields('w', ['nid'])
    ->condition('w.access_id', $tid)
    ->condition('n.type', 'partner', '=');
  return $q->execute()->fetchField();
}

/**
 * Implements hook_entity_property_info_alter().
 */
function hwc_good_practice_exchange_entity_property_info_alter(&$info) {
  $info['node']['properties']['partner_tid'] = array(
    'type' => 'text',
    'label' => t('Node Partner tid'),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_good_practice_exchange_node_get_workbench_access_tid',
  );
  $info['node']['properties']['partner_section'] = array(
    'type' => 'integer',
    'label' => t('Node Partner Section'),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_good_practice_exchange_node_get_workbench_section',
  );

/*  $info['node']['properties']['created_week_day'] = array(
    'type' => 'text',
    'label' => t('Week day of node creation'),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_good_practice_exchange_property_weekday_getter_callback',
  );
  $info['node']['properties']['test_multiple_field'] = array(
    'type' => 'list<text>',
    'label' => t('Test multiple text'),
    'sanitized' => TRUE,
    'getter callback' => 'hwc_good_practice_exchange_property_random_text_getter_callback',
  );*/
}

/**
 * Getter callback for created_week_day property.
 */
function hwc_good_practice_exchange_property_weekday_getter_callback($item) {
  return format_date($item->created, 'custom', 'D');
}

/**
 * Getter callback for multiple field.
 */
function hwc_good_practice_exchange_property_random_text_getter_callback($item) {
  $strings = array('one', 'two', 'three', 'four', 'five');
  $number = rand(1, 5);

  $values = array();
  while ($number > 0) {
    $values[] = $strings[rand(0, 4)];
    $number--;
  }

  return $values;
}
/**
 * Implements hook_search_api_solr_documents_alter().
 */
/*function hwc_good_practice_exchange_search_api_solr_documents_alter(array &$documents, SearchApiIndex $index, array $items) {
  foreach ($documents as $document) {
    $document->setField('foo', 'bar');
  }
}*/

/**
 * Implements hook_block_info().
 */
function hwc_good_practice_exchange_block_info() {
  $blocks = array();
  $blocks['gpe_links'] = array(
    'info' => t('Good Practice Exchange Links'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['gpe_tools_publications'] = array(
    'info' => t('Good Practice Exchange Tools & Publications'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

function hwc_good_practice_exchange_sort_form($form, $form_state) {
  $form = array();
  $form['sort_by'] = [
    '#type' => 'select',
    '#title' => t('Order'),
    '#default_value' => 'field_publication_date',
    '#options' => [
      'search_api_relevance' => t('Relevance'),
      'field_publication_year' => t('Year of publication'),
    ]
  ];
  $form['sort_by']['#value'] = @$_REQUEST['sort_by'];
  return $form;
}

/**
 * Implements hook_views_post_render().
 */
function hwc_good_practice_exchange_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == 'documents') {
    drupal_add_js(drupal_get_path('module', 'hwc_good_practice_exchange') . '/sort.js', array('weight' => 20));
    $form = drupal_get_form('hwc_good_practice_exchange_sort_form');
    $order_html = '<div class="sort-container col-xs-3">' . drupal_render($form) . '</div><span class="count-container pull-right">';
    $output = trim(str_replace('@order', $order_html, $output)). '</span>';
  }
}

/**
 * Implements hook_block_view().
 */
function hwc_good_practice_exchange_block_view($delta = '') {
  $block = array();
  if ($delta == 'gpe_links') {
    $prefix = '<div class="col-xs-12 col-sm-4">';
    $suffix = '</div>';
    $items = [];
    $items[] = l(
      '<span class="link-img"></span><span class="title">' . t('Become a campaign partner') . '</span>',
      'partner/register',
      ['html' => TRUE, 'attributes' => ['class' => 'become-campaign-partner']]);
    $items[] = l(
      '<span class="link-img"></span><span class="title">' . t('Get involved in Good Practice exchange initiative') . '</span>',
      '/good-practice-exchange-initiative',
      [
          'absolute' => TRUE,
          'html' => TRUE,
          'attributes' => ['class' => 'get-involved']
      ]);
    $items[] = l(
      '<span class="link-img"></span><span class="title">' . t('Access to the private zone') . '</span>',
      'private',
      ['html' => TRUE, 'attributes' => ['class' => 'private-zone']]);
    $block['subject'] = '';
    $block['content']['menu']['#markup'] = '<div class="gpe-links-block">' . $prefix . implode($suffix . $prefix, $items) . $suffix . '</div>';
  }

  if ($delta == 'gpe_tools_publications') {
    $block['subject'] = l(t('Tools and publications'), 'tools_and_publications');
    $items = [];
    $items[] = l(t('Case studies'), 'case-studies', ['attributes' => ['class' => 'case-studies']]);
    $items[] = l(t('Publications'), 'publications', ['attributes' => ['class' => 'publications']]);
    $items[] = l(t('DS e-tool'), 'e-tool', ['attributes' => ['class' => 'e-guides']]);
    $block['content']['menu']['#markup'] = theme('item_list', array('items' => $items, 'attributes' => array('class' => 'menu nav')));
    $block['content']['link'] = array(
      'type' => 'item',
      '#prefix' => '<div class="more-link">',
      '#markup' => l(t('See other Tools and Publications'), 'tools_and_publications'),
      '#suffix' => '</div>',
    );
  }

  return $block;
}
