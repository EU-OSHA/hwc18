<?php

include_once 'hwc.features.inc';

define('ROLE_ADMINISTRATOR', 'administrator');
define('ROLE_CAMPAIGN_PARTNER', 'campaign partner');
define('ROLE_SUPERVISOR', 'supervisor');
define('ROLE_SUPERADMINISTRATOR', 'Superadministrators');
define('SOLR_SEARCH_INDEX', 'default_multilingual_node_index');

/**
 * Implements hook_permission().
 */
function hwc_permission() {
  return array(
    'access private area' => array(
      'title' => t('Access the private area'),
      'description' => t('Access content inside the private area'),
    ),
    'configure hwc website' => array(
      'title' => t('Configure campaigns website'),
      'description' => t('Access the HCW configuration screen'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function hwc_menu() {
  $items['admin/config/system/hwc'] = array(
    'title' => 'HWC Configuration',
    'description' => 'Configure parameters for the HWC website',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hwc_admin_config_form'),
    'access arguments' => array('configure hwc website'),
    'file' => 'hwc_admin.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/activate/%'] = array(
    'title' => 'Activate user',
    'description' => 'Check if user was synchronized, if not trigger synchronization',
    'page callback' => 'hwc_user_activate',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['page-not-found'] = array(
    'title' => 'Page not found',
    'page callback' => 'hwc_page_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['export/node/%node'] = array(
    'page callback' => 'hwc_export_node',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function hwc_block_info() {
  $blocks = array();
  $blocks['page_share_widget'] = array(
    'info' => t('Page share widget'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['hwc_print_friendly'] = array(
    'info' => t('HWC Print friendly'),
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'region' => 'above_header',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function hwc_block_view($delta = '') {
  $block = array();
  if ($delta == 'page_share_widget') {
    $block['title'] = '<none>';
    $block['content'] = hwc_page_share_widget();
  }
  if ($delta == 'hwc_print_friendly') {
    $block['subject'] = "<none>";
    $block['content'] = theme('hwc_print_friendly_block');
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hwc_form_user_login_alter(&$form, &$form_state) {
  drupal_add_js('jQuery(document).ready(function () {jQuery("#edit-name").focus();});', 'inline');
  $form['name']['#description'] = t('Enter your username.');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hwc_form_user_pass_alter(&$form, &$form_state) {
  $form['#attributes']['class'][] = 'container';
}

/**
 * Implements hook_user_login().
 */
function hwc_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    // If the user is a partner, redirect to the corresponding partner profile
    if (in_array(ROLE_CAMPAIGN_PARTNER, $account->roles) && !empty($account->workbench_access)) {
      $sections = array_keys($account->workbench_access);
      foreach($sections as $id_section) {
        if ($partner = hwc_partner_by_section_id_load($id_section)) {
          $edit['redirect'] = 'node/' . $partner->nid;
          break;
        }
      }
    }
  }
}

function hwc_req_param($form_state, $name, $default = NULL) {
  if (!empty($form_state['values'][$name])) {
    $ret = $form_state['values'][$name];
  }
  if (!empty($_GET[$name])) {
    if (is_array($_GET[$name])) {
      $ret = array();
      foreach($_GET[$name] as $v) {
        $ret[] = check_plain($v);
      }
    }
    else {
      $ret = check_plain($_GET[$name]);
    }
  }
  if (!empty($ret)) {
    if (is_array($ret)) {
      $ret = array_filter($ret);
    }
    return $ret;
  }
  return $default;
}

/**
 * Implements hook_on_the_web_get_services_alter().
 */
function hwc_on_the_web_get_services_alter(&$services) {
  $services = array(
    'twitter' => array('name' => 'Twitter'),
    'facebook' => array('name' => 'Facebook'),
    'linkedin' => array('name' => 'LinkedIn'),
    'youtube' => array('name' => 'YouTube'),
    'flickr' => array('name' => 'Flickr'),
    'pinterest' => array('name' => 'Pinterest'),
    'google' => array('name' => 'Google+'),
    'myspace' => array('name' => 'MySpace'),
    'itunes' => array('name' => 'iTunes'),
    'delicious' => array('name' => 'Delicious'),
    'friendfeed' => array('name' => 'FriendFeed'),
    'rss' => array('name' => 'RSS'),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function hwc_field_extra_fields() {

  $share_widget = array(
    'display' => array(
      'share_widget' => array(
        'label' => t('Share widget'),
        'description' => t('The bar with links to social websites'),
        'weight' => 0,
      )
    )
  );
  $extra['node']['news'] = $share_widget;
  $extra['node']['events'] = $share_widget;
  $extra['node']['article'] = $share_widget;
  $extra['node']['hwc_gallery'] = $share_widget;
  $extra['node']['press_release'] = $share_widget;
  return $extra;
}

/**
 * Implements hook_webform_select_options_info().
 */
function hwc_webform_select_options_info() {
  $items = array();
  $items['business_sector'] = array(
    'title' => t('Business sector'),
    'options callback' => '_hwc_sector_options_list',
  );
  return $items;
}

function hwc_mime_friendly_acronym($mime) {
  $mappings = array(
    'application/msword' => t('DOC'),
    'application/vnd.ms-excel' => t('XLS'),
    'application/vnd.ms-powerpoint' => t('PPT'),
    'application/pdf' => t('PDF'),
    'video/quicktime' => t('Movie'),
    'audio/mpeg' => t('Audio'),
    'audio/wav' => t('Audio'),
    'image/jpeg' => t('Image'),
    'image/png' => t('Image'),
    'image/gif' => t('Image'),
    'application/zip' => t('ZIP'),
    'text/html' => t('HTML'),
    'text/plain' => t('TXT'),
    'application/octet-stream' => t('BIN'),
  );
  if (array_key_exists($mime, $mappings)) {
    return $mappings[$mime];
  }
  return $mime;
}

function hwc_mime_friendly_name($mime) {
  $mappings = array(
    'application/msword' => t('Word Document'),
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => t('Word Document'),
    'application/vnd.ms-excel' => t('Spreadsheet'),
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => t('Spreadsheet'),
    'application/vnd.ms-powerpoint' => t('Powerpoint'),
    'application/vnd.openxmlformats-officedocument.presentationml.presentation'  => t('Powerpoint'),
    'application/pdf' => t('PDF'),
    'image/jpeg' => t('JPEG Image'),
    'image/png' => t('Portable Network Graphics'),
    'image/gif' => t('Graphics Interchange Format'),
    'text/plain' => t('Text File'),
  );
  if (array_key_exists($mime, $mappings)) {
    return $mappings[$mime];
  }
  return $mime;
}


/**
* Implements hook_field_formatter_info().
*/
function hwc_field_formatter_info() {
  $info = array(
    'field_file' => array(
      'label' => 'Resource file formatter',
      'field types' => array('file'),
      'description' => 'Displays default icon per file type and file description.',
    ),
    'term_country_flag' => array(
      'label' => 'Country flag',
      'field types' => array('taxonomy_term_reference'),
      'description' => 'Displays a country flag for terms with field_flag set.',
    ),
    'hwc_file_download_link' => array(
        'label' => 'Generic download link',
        'field types' => array('file'),
        'description' => 'Display file name or description if the last one is not empty',
    ),
  );
  return $info;
}


/**
* Implements hook_theme().
*/
function hwc_theme() {
  return array(
    'hwc_file_format' => array(
      'variables' => array('file' => NULL, 'delta' => NULL),
    ),
    'news_share_widget' => array(
      'variables' => array(
        'url' => '', // Page URL
        'node' => array(), // Current node
        'tweet_url' => '',
        'language' => '', // Current language
        'options' => array(), // Additional configuration options
      ),
      'template' => 'templates/news_share_widget',
    ),
    'article_share_widget' => array(
      'variables' => array(
        'url' => '', // Page URL
        'node' => array(), // Current node
        'tweet_url' => '',
        'language' => '', // Current language
        'options' => array(), // Additional configuration options
      ),
      'template' => 'templates/article_share_widget',
    ),
    'hwc_print_friendly_block' => array(),
  );
}

function hwc_page_not_found() {
  // Try to find it in the old site.
  $request_uri = request_uri();
  $old_site = variable_get('hwc_old_site_url', 'http://hw2014.healthy-workplaces.eu');
  $old_url = $old_site . $request_uri;
  $response = drupal_http_request($old_url);
  if (!empty($response) && $response->code == 200) {
    unset($_GET['destination']);
    drupal_goto($old_url, array(), 301);
  }
  elseif (!preg_match('/^\/[a-z]{2}\//', $request_uri)) {
    // Try with en prefix.
    $old_url_en = $old_site . '/en' . $request_uri;
    $response = drupal_http_request($old_url_en);
    if (!empty($response) && $response->code == 200) {
      unset($_GET['destination']);
      drupal_goto($old_url_en, array(), 301);
    }
  }
  drupal_set_title(t('Page not found'));
  $html = '<p>' . t('Sorry, we can\'t find what you are looking for.') . '</p>';
  $html .= '<p>' . t('You could use the search above, instead or go back to !home.', array('!home' => l(t('Home'), ''))) . '</p>';
  return $html;
}


/**
 * Implements hook_entity_info_alter().
 */
function hwc_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['title_body'] = array(
    'label' => t('Title body'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['body'] = array(
    'label' => t('Body'),
    'custom settings' => TRUE,
  );
}

/**
* Implements hook_field_formatter_view().
*/
function hwc_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'field_file':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'hwc_file_format',
          '#file' => $item,
          '#delta' => $delta,
        );
      }
      break;
    case 'term_country_flag':
      foreach ($items as $delta => $item) {
        $term = taxonomy_term_load($item['tid']);
        $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
        if (!empty($term->field_flag)) {
          $vars = array(
            'style_name' => 'medium_large',
            'path' => $term_wrapper->field_flag->value()['uri'],
          );
          $element[$delta] = array(
            '#markup' => theme('image_style', $vars),
            '#term' => $item,
            '#delta' => $delta,
          );
        }
      }
      break;
    case 'hwc_file_download_link':
      foreach($items as $delta => $item){
        $uri = file_entity_download_uri(file_load($item['fid']));
        $link_name = $item['filename'];
        if(!empty($item['description'])){
          $link_name = $item['description'];
        }
        $link = l($link_name, $uri['path'], array('query' => $uri['options']['query']));
        $element[$delta]['#markup'] = $link;
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function hwc_field_formatter_info_alter(&$info) {
  // Define extra fields for settings form to save them.
  foreach ($info as &$formatter) {
    if ($formatter['module'] == 'flickrfield') {
      $formatter['settings']['image_class'] = '';
      $formatter['settings']['images_shown'] = 5;
    }
  }

}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function hwc_field_formatter_settings_form_alter(array &$settings_form, array $context) {
  if ($context['module'] == 'flickrfield') {
    // Add extra field on colorbox formatter so that colorbox uses field caption.
    $settings = $context['formatter']['settings'];
    $settings_form['image_class'] = array(
      '#type' => 'textfield',
      '#title' => t('Image css class'),
      '#default_value' => $settings['image_class'],
    );
    $settings_form['images_shown'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of images'),
      '#default_value' => $settings['images_shown'],
    );
  }
}

/*
* Formats the related resources (attached files) as icon and description/filename
*/
function theme_hwc_file_format($element) {
  $file = (object) $element['file'];
  $icon_directory = drupal_get_path('theme', 'hwc_frontend') . '/images/file_icons';
  $name = ($file->description != NULL) ? $file->description : $file->filename;
  $output = '<a href="' . file_create_url($file->uri) . '">';
  $output .= theme('file_icon', array(
    'file' => $file,
    'icon_directory' => $icon_directory
  ));
  $output .= '<span>' . $name . '</span>';
  $size = @filesize($file->uri);
  if ($size) {
    $output .= '<span class="file_size">(' . format_size($size) . ')</span>';
  }
  $output .= '</a>';
  return $output;
}

/**
 * Implments hook_form_FORM_ID_alter().
 */
function hwc_form_chosen_admin_settings_alter(&$form, $form_state) {
  // Add options to chosen 30.
  $form['chosen_minimum_single']['#options']['30'] = '30';
  $form['chosen_minimum_multiple']['#options']['30'] = '30';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function hwc_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Hide migration source field.
  if (isset($form['field_migration_source'])) {
    $form['field_migration_source']['#access'] = FALSE;
  }

  if (isset($form['field_show_in_ncw'])) {
    $form['field_show_in_ncw']['#access'] = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_ADMINISTRATOR, $user);
  }

  if (!empty($form['#entity']->field_migration_source)) {
    drupal_set_message('You are not allowed to edit imported content', 'warning');
    $form['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function hwc_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (isset($form['field_activity'])
    && !empty($form['#node'])
    && empty($form['#node']->nid)
    && empty($form['field_activity'][LANGUAGE_NONE]['#default_value'])) {

    if ($tid = osha_taxonomies_load_activity_by_code('raising_awareness_3')) {
      $form['field_activity'][LANGUAGE_NONE]['#default_value'][] = $tid;
    }
  }
  if (isset($form['field_activity'])) {
    $form['field_activity'][LANGUAGE_NONE]['#multiple'] = FALSE;
  }
  if (in_array($form_id, array('events_node_form', 'news_node_form'))) {
    if ($user->uid != 1) {
      $form['field_tags']['#access'] = FALSE;
    }
  }

  $is_edit_form = isset($form['#node_edit_form']) &&
    $form['#node_edit_form'] == TRUE;

  $is_events_form = $is_edit_form &&
    $form['type']['#value'] == 'events';

  if ($is_events_form) {
    $form['#after_build'] = array('_form_add_website_placeholder_after_build');
  }

  if ($form_id == 'lang_dropdown_form') {
    $form['lang_dropdown_select']['#attributes']['title'] = t('Language switcher dropdown');
  }


  if ($form_id == 'system_site_information_settings') {
    $form['site_information']['site_hwc_mostra_mailbox'] = array(
      '#type' => 'textfield',
      '#title' => t('Mostra mailbox'),
      '#default_value' => variable_get('site_hwc_mostra_mailbox'),
    );
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function hwc_entity_property_info_alter(&$info) {
  $properties =& $info['site']['properties'];
  // Add mostra mailbox property to use it in rules.
  $properties['hwc_mostra_mailbox'] = array(
    'label' => 'Mostra mailbox',
    'description' => 'Mostra mailbox',
    'getter callback' => 'entity_metadata_system_get_properties',
  );
}


/**
 * Implements hook_node_submit().
 */
function hwc_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  if ($entity_type == 'node') {
    // Attach the current campaign tags to the created news and events (HCW-350)
    $new = empty($entity->nid);
    $news_event = in_array($entity->type, array('news', 'events'));
    if ($new && $news_event && $curr_tags = variable_get('hwc_current_campaign_tags')) {
      $tags = field_get_items('node', $entity, 'field_tags');
      if (empty($tags)) {
        $existing_tags = taxonomy_term_load_multiple($curr_tags);
        if (!empty($existing_tags)) {
          foreach (array_keys($existing_tags) as $tid) {
            $entity->field_tags[LANGUAGE_NONE][] = array('tid' => $tid);
          }
        }
      }
    }
  }
}

function _form_add_website_placeholder_after_build($form) {
  $placeholder = t('Website of event');
  $form['field_website_of_event'][LANGUAGE_NONE][0]['url']['#attributes']['placeholder'] = $placeholder;
  return $form;
}


/**
 * Implements hook_theme_registry_alter().
 */
function hwc_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['date_part_label_time'])) {
    unset($theme_registry['date_part_label_time']['file']);
    $theme_registry['date_part_label_time']['function'] = 'theme_hwc_date_part_label_time';
  }
  if (!empty($theme_registry['date_part_label_date'])) {
    unset($theme_registry['date_part_label_date']['file']);
    $theme_registry['date_part_label_date']['function'] = 'theme_hwc_date_part_label_date';
  }
}

function theme_hwc_date_part_label_time($variables) {
  if (!empty($variables['element']['#instance']) && $variables['element']['#instance']['field_name'] == 'field_start_date'
      && $variables['element']['#instance']['bundle'] == 'events') {
    return '';
  }
  else {
    return theme_date_part_label_time($variables);
  }
}

function theme_hwc_date_part_label_date($variables) {
  if (!empty($variables['element']['#instance']) && $variables['element']['#instance']['field_name'] == 'field_start_date'
      && $variables['element']['#instance']['bundle'] == 'events') {
    return t('Starting date and time') . '<span class="form-required" title="' . t('This field is required.') . '">*</span>';
  }
  else {
    return theme_date_part_label_date($variables);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function hwc_field_widget_form_alter(&$element, &$form_state, $context) {
  $is_edit_form = isset($context['form']['#node_edit_form']) &&
    $context['form']['#node_edit_form'] == TRUE;

  $is_events_form = $is_edit_form &&
    $context['form']['type']['#value'] == 'events';

  $is_news_form = $is_edit_form &&
    $context['form']['type']['#value'] == 'news';

  if ($is_events_form) {
    switch ($element['#field_name']) {
      case 'title_field':
        $placeholder = 'Event title. Max 60 characters.';
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;

      case 'field_city':
        $placeholder = 'Event city';
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;

      case 'field_contact_name':
        $placeholder = 'Contact person name';
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;

      case 'field_contact_phone':
        $placeholder = 'Contact person phone number';
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;

      case 'field_organizer':
        $placeholder = 'The name of the organisation';
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;

      case 'field_location':
        $placeholder = 'Location of the event';
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;

      case 'field_website_of_event':
        $placeholder = 'Website of event';
        $element['#attributes']['placeholder'] = $placeholder;
        break;

      case 'field_contact_email':
        $placeholder = 'Contact person e-mail';
        $element['email']['#attributes']['placeholder'] = $placeholder;
        break;

    }
  }
  elseif ($is_news_form && !empty($element['#field_name'])) {
    switch ($element['#field_name']) {
      case 'title_field':
        $placeholder = 'News title';
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;

      case 'field_image_caption':
        $placeholder = 'Image caption';
        $element['value']['#attributes']['placeholder'] = $placeholder;
        break;

    }
  }
}

/**
 * Implements hook_node_view().
 */
function hwc_node_view($node, $view_mode, $langcode) {
  // /become-campaign-partner page. See HCW-600
  if ($node->nid == 165 & !empty($node->content['body'][0]['#markup'])) {
    $show_registration = hwc_partner_registration_allowed();
    $body =& $node->content['body'][0]['#markup'];
    if ($show_registration) {
      $body = str_replace(
        '[-PLACEHOLDER-REGISTER-DO-NOT-REMOVE-]',
        '<a class="btn-become-a-campaign-partner" href="/partner/register">' . t('Become a campaign partner') . '</a>',
        $body
      );
    }
    else {
      $body = str_replace(
        '[-PLACEHOLDER-REGISTER-DO-NOT-REMOVE-]',
        '<div class="alert registration-over">' . t(variable_get('hwc_partner_registration_deadline_message')) . '</div>',
        $body
      );
    }
  }

  // /partner/register
  if ($node->nid == 225) {
    // Partner registration page.
    if (!empty($_GET['id'])) {
      $_SESSION['appform_id'] = $_GET['id'];
    }
    if (!empty($_GET['mf'])) {
      $_SESSION['mf'] = $_GET['mf'];
    }
  }

  $share_widget_content_types = array(
    'news',
    'events',
    'article',
    'hwc_gallery',
    'press_release',
  );
  // Array of nids where to hide the share widget.
  $no_share_widget = array(
    162, 241, 242, 243, 244, 245, 246,
  );

  if (($view_mode == 'full' && !empty($node->field_activity))) {
    $wrapper = entity_metadata_wrapper('node', $node);
    drupal_add_js(array('hwc' => array(
      'activity' => $wrapper->field_activity->value()[0]->name,
    )), 'setting');
  }

  if ($view_mode == 'full'
    && in_array($node->type, $share_widget_content_types)
    && !in_array($node->nid, $no_share_widget)) {
    $extra_fields = field_info_extra_fields('node', $node->type, 'display');
    if (!empty($extra_fields['share_widget']['display']['default']['visible'])) {
      $options = array();
      if (in_array($node->type, array('article', 'hwc_gallery', 'press_release'))) {
        $options['rss_hide'] = 1;
      }
      if ($node->type == 'events') {
        $options['rss_url'] = url('rss-feeds/latest/events.xml', array('absolute' => TRUE));
      }

      $node->content['share_widget'] = array('#markup' => hwc_news_share_widget($node, $options));
    }
  }
}

function hwc_news_share_widget($node, $options = array()) {
  global $language;
  /** @var stdClass $wrapper */
  $type = 'other';
  if (!empty($options['page']) && $options['page'] === TRUE) {
    $url = url(current_path(), array('absolute' => TRUE));
    $title = drupal_get_title();
  }
  else {
    $url = url('node/' . $node->nid, array('absolute' => TRUE));
    $title = $node->title;
    $type = $node->type;
  }
  // Add services javascript.
  $site_name = variable_get('site_name', '');
  // Construct the tweet.
  $twitter_text = $title . ' | ' . $site_name;
  $tweet_url = url('https://twitter.com/intent/tweet', array(
    'query' => array(
      'original_referer' => $url,
      'text' => $twitter_text,
      'url' => shorten_url($url),
    ),
  ));
  $vars = array(
    'url' => $url,
    'tweet_url' => $tweet_url,
    'node' => $node,
    'language' => $language,
    'options' => $options,
    'label' => t('Share this article'),
    'type' => $type,
  );
  // Custom label for videos related articles.
  if (!empty($node->nid) && ($node->nid == 160 || $node->nid == 108)) {
    $vars['label'] = t('Share this video');
  }

  // Merge default vars with ones from options.
  $vars = $options + $vars;
  switch ($vars['type']) {
    case 'article':
      $widget = theme('article_share_widget', $vars);
      break;

    default:
      $widget = theme('news_share_widget', $vars);
      break;
  }
  return $widget;
}

function hwc_page_share_widget() {
  $false_node = array('nid' => 0);
  return hwc_news_share_widget((object) $false_node, array('page' => TRUE));
}

/**
 * Allows modules to edit the Workbench Access node form element.
 *
 * This convenience function runs a hook_form_alter() targeted only at
 * the form element defined by Workbench Access.
 *
 * @param &$element
 *   The form element defined by workbench_access_form_alter(), passed
 *   by reference.
 * @param &$form_state
 *   The current form state, passed by reference.
 * @param $active
 *   The active data information for the access scheme.
 *
 * @see workbench_access_get_active_tree()
 *
 */
function hwc_workbench_access_node_element_alter(&$element, $form_state, $active) {
  $allow_section_field = _hwc_get_allowed_section_node_types();
  $form_id = $form_state['build_info']['form_id'];
  $form = drupal_retrieve_form($form_id, $form_state);

  if (!empty($form['#node_edit_form']) && !in_array($form['#node']->type, $allow_section_field)) {
    $element['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_presave().
 */
function hwc_node_presave($node) {
  // Set section to default one for the nodes that have section field hidden.
  $allow_section_field = _hwc_get_allowed_section_node_types();
  if (!in_array($node->type, $allow_section_field) && variable_get('workbench_access_node_type_' . $node->type, FALSE)) {
    if (empty($node->workbench_access)) {
      $node->workbench_access['section'] = 'section';
    }
  }
}

/**
 * Get array of node types that are allowed to be per section.
 *
 * @return array
 */
function _hwc_get_allowed_section_node_types() {
  return array('news','events');
}

function _hwc_segment_options_list() {
  $return = array('0' => t('All audience'));
  $vocabulary = taxonomy_vocabulary_machine_name_load('segment');
  if (!empty($vocabulary)) {
    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    foreach($terms as $key => $term) {
      $return[$term->tid] = $term->name;
    }
  }
  return $return;
}

/**
 * Get business sector options array.
 */
function _hwc_sector_options_list() {
  $return = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load('bussines_sector');
  if (!empty($vocabulary)) {
    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    foreach($terms as $key => $term) {
      $return[$term->tid] = $term->name;
    }
  }
  return $return;
}

/**
 * Hook menu to trigger user synchronization
 * @param $email
 */
function hwc_user_activate($mail) {
  if (empty($_GET['token']) || variable_get('hwc_user_activate_token') != $_GET['token']) {
    drupal_add_http_header('Status', '400 Missing token');
    echo '400 Missing token';
    drupal_exit();
    die();
  }

  // Check the user
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')->propertyCondition('mail', $mail);
  $result = $query->execute();
  if (count($result) > 0) {
    $row = current(reset($result));
    $account = user_load($row->uid);
    watchdog('hwc', 'Generating one-time login link for account <em>!uid</em>', array(
      '!uid' => $account->name
    ), WATCHDOG_WARNING);
    // Generate one time password reset link
    print user_pass_reset_url($account);
    drupal_exit();
    die();
  }

  // Lookup the record
  $ldap_account = NULL;
  if ($auth_conf = ldap_authentication_get_valid_conf()) {
    /**
     * @var string $sid
     * @var LdapServer $ldap_server
     */
    foreach ($auth_conf->enabledAuthenticationServers as $sid => $ldap_server) {
      if ($result = $ldap_server->search('ou=people,dc=osha,dc=europa,dc=eu', 'mail=' . $mail, array('uid'))) {
        if (!empty($result[0]['uid'][0])) {
          $uid = $result[0]['uid'][0];
          $dn = $result[0]['dn'];
          require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
          $ldap_account = (object) array(
            'dn' => $dn,
            'name' => $uid,
            'mail' => $mail,
            'status' => 1,
            'created' => REQUEST_TIME,
            'access' => REQUEST_TIME,
            'login' => REQUEST_TIME,
            'is_new' => TRUE,
          );
          break;
        }
      }
    }
  }
  if ($ldap_account) {
    if ($account = user_save($ldap_account)) {

      $edit['pass'] = user_password(32);
      user_save($account, $edit);

      watchdog('hwc', 'Activating Drupal account <em>!uid</em> from LDAP dn: !dn', array(
        '!dn' => $ldap_account->dn,
        '!uid' => $ldap_account->name
      ), WATCHDOG_WARNING);
      // Generate one time password reset link
      print user_pass_reset_url($account);
      drupal_exit();
      die();
    }
    else {
      watchdog('hwc', 'Failed to activate new Drupal account <em>!uid</em> from LDAP dn: !dn', array(
        '!dn' => $ldap_account->dn,
        '!uid' => $ldap_account->name
      ), WATCHDOG_ERROR);
      drupal_add_http_header('Status', '500 Failed to save the user');
      print '500 Failed to save the user';
      drupal_exit();
      die();
    }
  }
  else {
    drupal_add_http_header('Status', '404 User not found');
    echo '404 User not found';
    drupal_exit();
    die();
  }
}


/**
 * Retrieve configuration parameter for the form applications.
 *
 * @return array
 *   Returns an array having the following keys:
 *   <ul>
 *     <li>appform_id - GUID received from the 'id' parameter when partner register</li>
 *    <li>mf - TRUE if we are editing the partner profile, FALSE when registering</li>
 *    <li>user_guid - User's GUID stored in LDAP, useful when editing partner profile</li>
 */
function hwc_get_forms_parameters() {
  global $user;

  $ret = array(
    'appform_id' => NULL,
    'mf' => FALSE,
    'partner_guid' => NULL,
  );

  try {
    $wrapper = entity_metadata_wrapper('user', $user);
    $ret['user_guid'] = $wrapper->field_crm_guid->value();
  }
  catch(Exception $e) {}

  if (!empty($_SESSION['appform_id'])) {
    $ret['appform_id'] = $_SESSION['appform_id'];
  }

  if (!empty($_SESSION['mf'])) {
    $ret['mf'] = $_SESSION['mf'];
  }

  return $ret;
}

/**
 * Check whether the partner registration should be still opened.
 *
 * @return bool
 *   Returns TRUE if partner registration still open
 */
function hwc_partner_registration_allowed() {
  $ret = TRUE;
  $deadline = variable_get('hwc_partner_registration_deadline', NULL);
  if (!empty($deadline)) {
    $day = $deadline['day']; $month = $deadline['month']; $year = $deadline['year'];
    $time = mktime(0, 0, 0, $month, $day, $year);
    $ret = time() <= $time;
  }
  return $ret;
}

/**
 * Implements hook_webform_component_render_alter().
 */
function hwc_webform_component_render_alter(&$element, &$component) {
  if ($component['cid'] == 9) {
    // Add description link.
    $link = l(t('Privacy notice'), 'privacy-policy-certificate-participation', array('attributes'=> array('target' => '_blank')));
    $element['#description'] = str_replace('[PRIVACY_NOTICE]', $link, $element['#description']);
  }
}

/**
 * Get iso2 code of a Country name (from standard Drupal list)
 */
function _hwc_iso2_by_name($name) {
  $countries = country_get_list();
  foreach($countries as $iso2 => $country) {
    if (strtoupper($country) == strtoupper($name)) {
      return $iso2;
    }
  }
}

/**
 * Implements hook_term_presave().
 */
function hwc_taxonomy_term_presave($term) {
  // When saving a country term, attach the flag on field_flag.
  $voc = taxonomy_vocabulary_machine_name_load('country');
  if (empty($term->field_iso2[LANGUAGE_NONE][0]['value'])) {
    $iso2_by_name = _hwc_iso2_by_name($term->name);
    if (!empty($iso2_by_name)) {
      $term->field_iso2[LANGUAGE_NONE][0]['value'] = $iso2_by_name;
    }
  }
  if ($term->vid == $voc->vid
    && !empty($term->field_iso2[LANGUAGE_NONE][0]['value'])
    && empty($term->field_flag[LANGUAGE_NONE][0])) {
    $dir = 'public://flags';
    if (!file_prepare_directory($dir)) {
      drupal_set_message('Flags directory could not be created.', 'warning');
      return;
    }
    $path = drupal_get_path('theme', 'hwc_frontend');
    $images_dir = $path . '/images/iso2_flags';
    if (!is_dir($images_dir)) {
      drupal_set_message('Could not find the flags images source directory.', 'warning');
    }
    else {
      $iso2 = strtoupper($term->field_iso2[LANGUAGE_NONE][0]['value']);
      $image_filename = $iso2 . '.gif';
      $image_dest_dir = $dir . '/' . $image_filename;
      $image_path = $images_dir . '/' . $image_filename;
      $filepath = drupal_realpath($image_path);
      if (is_file($filepath)) {
        // Create managed File object and associate with Image field.
        $file = (object) array(
          'uid' => 1,
          'uri' => $filepath,
          'filemime' => file_get_mimetype($filepath),
          'status' => 1,
        );
        if ($file = file_copy($file, $image_dest_dir)) {
          $term->field_flag[LANGUAGE_NONE][0] = (array) $file;
        }
      }
      else {
        drupal_set_message(strtr('Flag not found for @country', array('@country' => $term->name)), 'warning');
      }
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function hwc_page_alter(&$page) {
  // MH-268
  // Add segments as js setting and set it up as cookie to push it on piwik.
  $segment_pairs = explode("\n", variable_get('hwc_segmentation_urls', ''));
  $segments = [];
  foreach ($segment_pairs as $pair) {
    $pair = explode('|', $pair);
    $segments[$pair[0]] = $pair[1];
  }
  $path = current_path();
  $segment_name = NULL;
  if (in_array($path, array_keys($segments))) {
    $segment_name = $segments[$path];
    // Add the code from this file into piwik config screen.
//    drupal_add_js(drupal_get_path('module', 'hwc') .'/js/piwik_segment.js', array('type' => 'file', 'scope' => 'footer', 'weight' => 5));
  }
  drupal_add_library('system', 'jquery.cookie');
  drupal_add_js(array('hwc' => array(
    'segment' => $segment_name,
  )), 'setting');
}

function theme_hwc_print_friendly_block() {
  $content = array(
    '#markup' => '<a href="javascript:if(window.print)window.print();" class="printfriendly" title="Print page"></a>'
  );
  return render($content);
}


/**
 * Implements hook_form_alter().
 */
function hwc_form_search_block_form_alter(&$form) {
  // Overwrite the search page default url.
  // Unset the form elements - the search view needs just the search param.
  $form['#action'] = url('search');
  $form['#method'] = 'get';
  unset($form['form_token']);
  unset($form['#submit']);
  unset($form['form_build_id']);
  unset($form['form_id']);
}


/**
 * Implements hook_filter_info().
 */
function hwc_filter_info() {
  $filters['hwc_tmgmt_filter_id'] = array(
    'title' => t('Removes tmgmt id attribute to prevent duplicate id in same page'),
    'process callback' => '_hwc_filter_html_id',
    'weight' => 11,
  );
  return $filters;
}

/**
 * Implements callback_filter_process().
 */
function _hwc_filter_html_id($text) {
  $html_dom = filter_dom_load($text);
  $xpath = new DOMXPath($html_dom);
  $nodes = $xpath->query("//*[contains(@id, 'tmgmt')]");;
  foreach ($nodes as $node) {
    $node->removeAttribute('id');
  }
  return filter_dom_serialize($html_dom);
}

/**
 * Export node to JSON.
 *
 * @param $node
 */
function hwc_export_node($node) {
  if ($node->status == 0) {
    header('HTTP/1.0 404 Forbidden');
    drupal_exit();
  }
  header('Content-type: application/javascript; charset=utf-8');
  $fields = field_info_instances('node', $node->type);
  $w = entity_metadata_wrapper('node', $node);
  $node->path = path_load('node/' . $node->nid);
  foreach(array_keys($fields) as $field_name) {
    $info = field_info_field($field_name);
    if ($info['type'] == 'taxonomy_term_reference') {
      $node->$field_name = $w->$field_name->value();
    }
  }
  // Change relative links to absolute.
  if (function_exists('_pathologic_filter')) {
    if (!empty($node->body)) {
      foreach ($node->body as $lng => $body) {
        $node->body[$lng][0]['value'] = check_markup($node->body[$lng][0]['value'], 'full_html', $lng);
      }
    }
    if (!empty($node->field_summary)) {
      foreach ($node->field_summary as $lng => $body) {
        $node->field_summary[$lng][0]['value'] = check_markup($node->field_summary[$lng][0]['value'], 'full_html', $lng);
      }
    }
  }
  $node->full_url = url('node/' . $node->nid, ['absolute' => TRUE]);
  $export = json_encode($node, JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE);
  print $export;
  drupal_exit();
}
